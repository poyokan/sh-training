#!/bin/bash

set -euo pipefail
# -e: エラーが発生したときにスクリプトを中断する。
# -u: 未定義変数をエラーにする
# -x: 実行したコマンドを出力する → これは消した
# -o pipefail: パイプで結合したコマンドの途中でエラーが発生したときもスクリプトを中断する

# どこで実行しても良いように作業フォルダに移動する
cd "$(dirname "$0")"
pwd

#----------------------------------------
# 機能概要：
#   ＜フォルダ構造TXTファイル＞で定義されたフォルダを＜出力先ディレクトリ＞に作成する
#
# 引数：
#   1．フォルダ構造を定義したTXTファイルのパス。ダブルクォーテーションで囲って指定する。
#   2. 出力先ディレクトリのパス。ダブルクォーテーションで囲って指定する。
#
#----------------------------------------



################################
# エラー定義

# 引数で与えられたエラーメッセージをコンソール出力し、処理を異常終了する
function error {
    echo "実行エラー：$1"
    exit 1
}

## エラーメッセージ定義
errMsg01="実行エラー:引数の数が違います"

###################################

echo "引数のエラーチェックをするよ！"

# 引数を受け取る
# 引数の数チェック

totalArgs="2"

if [ $# -ne ${totalArgs} ]; then
    error ${errMsg01}
fi

# 引数1 取得 フォルダ構造定義ファイルパス
dirStructFilePath="$1"

# 絶対パスで指定されていない(=「/」で始まらない)ときエラー ※sh限定の判別方法。Windowsでは使用不可。
if [ "${dirStructFilePath:0:1}" != "/" ]  ; then
    echo "指定されたパスは絶対パスではありません"
    exit 1
fi

# ファイルが存在していない場合エラー
if [ ! -f "${dirStructFilePath}" ]; then
    echo "入力ファイルが存在していません"
    exit 1
fi

# TXTファイル 読み込み可能でない場合エラー
if  [ ! -r "${dirStructFilePath}" ]; then
    echo "入力ファイルが読み込み不可です"
    ecit 1
fi

# 読み込むファイルフォーマットが正しくない場合エラー
# → 空白を除いたそれぞれの行頭が「#」または「- 」から始まっていないとき
while read -r line
do
    if [[ "${line}" != "- "* ]] && [[ "${line}" != "#"* ]]; then
        echo "ファイルフォーマットが違います"
        exit 1
    fi
done << DATA
$(cat "${dirStructFilePath}")
DATA

# 引数2 取得 出力先ディレクトリパス
outputDirPath="$2"
# 絶対パスで指定されていない(=「/」で始まらない)ときエラー ※sh限定の判別方法。Windowsでは使用不可。
if [ "${outputDirPath:0:1}" != "/" ]  ; then
    echo "指定されたパスは絶対パスではありません"
    exit 1
fi

# ディレクトリが存在していない場合エラー
# Memo: そのうち、中身が存在しているか確認して「y/n」で上書き続行チェックに変更する
if [ ! -d "${outputDirPath}" ]; then
    echo "出力先ディレクトリが存在していません"
    exit 1
fi

# 出力先ディレクトリ 書き込み可能でない場合エラー
if  [ ! -w "${outputDirPath}" ]; then
    echo "入力先ディレクトリが書き込み不可です"
    ecit 1
fi

echo "引数のエラーチェックが無事に終わったよ！"


# フォルダ作成のルートフォルダを定義

# TXTファイルの行数を取得
# 進捗表示 現在の行数/最大行数

# TXTファイル 1行ずつ読み込み 繰り返し処理

# # 行頭の空白を保持したいのでIFSを利用している
# while IFS= read -r line
# do
#     echo "line : ${line}"
# done << DATA
# $(cat "${dirStructFilePath}")
# DATA



# while read line
# do

# done < file_path

    # 「#」から始まる行の場合無視する

    # 先頭から「- 」を除いた文字列＝ディレクトリ名取得
        # ディレクトリ名に使えない文字があった場合の処理

    # 「-」の位置を取得


    # 「-」の位置が前の行より前の場合、階層を浅くする
    # 「-」の位置が前の行と同じ場合、階層を同じにする
    # 「-」の位置が前の行よりも後の場合、階層を深くする

    # ディレクトリ作成処理


# 処理完了メッセージ

    # 正常終了
    # 異常終了
exit 0